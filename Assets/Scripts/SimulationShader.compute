#pragma kernel Simulation
#pragma kernel Display

RWTexture2D<float> Cells;
RWTexture2D<float> NextCells;
RWTexture2D<float4> DisplayTexture;

RWStructuredBuffer<int> InitialState;

int width, height, frameCount;

float dl = 0.04;

float rand(float2 co)
{
    return (frac(sin(dot(co.xy, float2(12.9898, 78.223))) * 43758.5453)) * 1;

}

int CountNeighbours(int x, int y)
{
    int count = 0;
    for (int i = x - 1; i <= x + 1; i++)
    {
        for (int j = y - 1; j <= y + 1; j++)
        {
            if (Cells[uint2(i, j)] == 1)
                count += Cells[uint2(i, j)];
        }
    }
    if (Cells[uint2(x, y)] == 1)
        count -= Cells[uint2(x,y)];
    return count;
}

[numthreads(8, 8, 1)]
void Simulation(int3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height)
        return;
    
    float state = Cells[id.xy];
    float nextState = state;
    
    if(state < 1 && state > 0)
        nextState -= 0.1;
    
    int neighboursCount = CountNeighbours(id.x, id.y);
    if (state == 1 && (neighboursCount == 1 || neighboursCount == 5))
        nextState = 1;
    else if (state <= 0.0 && (neighboursCount == 2 || neighboursCount == 4))
        nextState = 1;
    else
        nextState -= 0.1;
    
    if (frameCount == 0)
        nextState = InitialState[id.x + id.y * width];
    
    NextCells[id.xy] = nextState;
}

[numthreads(8, 8, 1)]
void Display(int3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height)
        return;
    
    float4 color = float4(0.0, 0.0, 0.0, 1.0);
    
    float state = Cells[id.xy];
    
    if (state == 1)
        color = float4(1.0,1.0,1.0, 0.1);
    else if (state < 1 && state > 0.8)
        color = float4(state * 0.8, (1.0 - state) * 0.8, (state * 0.7) * 0.8, 1.0);
    else if (state <= 0.8 && state > 0)
        color = float4(0.0, state * 0.8, state * 0.8, 1.0);
    else if (state == 0)
        color = float4(0.0, 0.0, 0.0, 1.0);
    
    DisplayTexture[id.xy] = float4(color.xyz, 0.5);
}
